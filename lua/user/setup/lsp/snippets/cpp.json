{
	"Template main.cpp": {
		"prefix": "main",
		"body": [
			"#include <iostream>",
			"",
			"int\tmain( int argc, char *argv[] ) {",
			"",
			"\t( void )argc;",
			"\t( void )argv;",
			"",
			"\t$0",
			"",
			"\treturn ( 0 );",
			"}"
		],
		"description": "main.cpp template snippet"
	},
	"ifndef clause": {
		"prefix": "#ifndef",
		"body": [
			"#ifndef $1",
			"# define $1",
			"",
			"$0",
			"#endif /* $1 */"
		],
		"description": "My code snippet for #ifndef"
	},
	"headers" : {
		"prefix": "Headers",
		"body": [
			"",
			"/* ************************************************************************** */",
			"/* Headers                                                                    */",
			"/* ************************************************************************** */",
			"",
			"# include <iostream>",
			"# $0"
		],
		"description": "My code snippet for includes in header file"
	},
	"Canonical Class Definition": {
		"prefix": "class",
		"body": [
			"/* ************************************************************************** */",
			"/* Class                                                                      */",
			"/* ************************************************************************** */",
			"",
			"class ${TM_FILENAME_BASE} {",
			"",
			"\tpublic:",
			"",
			"\t\t/* Constructors and Destructors */",
			"\t\t${TM_FILENAME_BASE}( void );",
			"\t\t~${TM_FILENAME_BASE}( void );",
			"\t\t${TM_FILENAME_BASE}( ${TM_FILENAME_BASE} const& src );",
			"",
			"\t\t/* Operator Overload */",
			"\t\t${TM_FILENAME_BASE}&\toperator=( ${TM_FILENAME_BASE} const& rhs );",
			"",                      	
			"\t\t/* Getters and Setters */",
			"",
			"\t\t/* Other Functions */",
			"",
			"\t\t/* Exceptions */",
			"",
			"\tprivate:",
			"",
			"\t\t/* Private Attributes */",
			"\t\t$0",
			"};",
			"",
			"/* ************************************************************************** */",
			"/* Other Functions                                                            */",
			"/* ************************************************************************** */",
			"",
			"std::ostream&\toperator<<( std::ostream& os, ${TM_FILENAME_BASE} const& rhs );",
			""
		],
		"description": "My code snippet for a canonical class"
	},
	"Class Definition": {
		"prefix": "class",
		"body": [
			"/* ************************************************************************** */",
			"/* Class                                                                      */",
			"/* ************************************************************************** */",
			"",
			"class ${TM_FILENAME_BASE} {",
			"",
			"\tpublic:",
			"",
			"\t\t/* Constructors and Destructors */",
			"",
			"\t\t/* Operator Overload */",
			"",                      	
			"\t\t/* Getters and Setters */",
			"",
			"\t\t/* Other Functions */",
			"",
			"\t\t/* Exceptions */",
			"",
			"\tprivate:",
			"",
			"\t\t/* Private Attributes */",
			"",
			"};",
			""
		],
		"description": "My code snippet for a class"
	},
	"Canonical Class Implementation": {
		"prefix": "class",
		"body": [
			"#include \"${TM_FILENAME_BASE}.hpp\"",
			"",
			"/* ************************************************************************** */",
			"/* Constructors and Destructors                                               */",
			"/* ************************************************************************** */",
			"",
			"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}( void ) {",
			"\tDEBUG( \"${TM_FILENAME_BASE} default constructor called\" );",
			"}",
			"",
			"${TM_FILENAME_BASE}::~${TM_FILENAME_BASE}( void ) {",
			"\tDEBUG( \"${TM_FILENAME_BASE} destructor called\" );",
			"}",
			"",
			"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}( ${TM_FILENAME_BASE} const& src ) {",
			"",
			"\t*this = src;",
			"\tDEBUG( \"${TM_FILENAME_BASE} copy constructor called\" );",
			"}",
			"",
			"/* ************************************************************************** */",
			"/* Operator Overload                                                          */",
			"/* ************************************************************************** */",
			"",
			"${TM_FILENAME_BASE}&\t${TM_FILENAME_BASE}::operator=( ${TM_FILENAME_BASE} const& rhs ) {",
			"",
			"\t$0",
			"\treturn ( *this );",
			"}",
			"",
			"std::ostream&\toperator<<( std::ostream& os, ${TM_FILENAME_BASE} const& rhs ) {",
			"\treturn ( os );",
			"}",
			"",
			"/* ************************************************************************** */",
			"/* Getters and Setters                                                        */",
			"/* ************************************************************************** */",
			"",
			"/* ************************************************************************** */",
			"/* Other Functions                                                            */",
			"/* ************************************************************************** */",
			"",
			"/* ************************************************************************** */",
			"/* Class Exceptions                                                           */",
			"/* ************************************************************************** */",
			""
		],
		"description": "My code snippet for canonical class Implementation"
	},
	"Class Implementation": {
		"prefix": "class",
		"body": [
			"#include \"${TM_FILENAME_BASE}.hpp\"",
			"",
			"/* ************************************************************************** */",
			"/* Constructors and Destructors                                               */",
			"/* ************************************************************************** */",
			"",
			"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}( void ) {",
			"}",
			"",
			"${TM_FILENAME_BASE}::~${TM_FILENAME_BASE}( void ) {",
			"}",
			"",
			"/* ************************************************************************** */",
			"/* Getters and Setters                                                        */",
			"/* ************************************************************************** */",
			"",
			"/* ************************************************************************** */",
			"/* Other Functions                                                            */",
			"/* ************************************************************************** */",
			"",
			"/* ************************************************************************** */",
			"/* Class Exceptions                                                           */",
			"/* ************************************************************************** */",
			""
		],
		"description": "My code snippet for class Implementation"
	},
	"Exception Definition": {
		"prefix": "Exceptions",
		"body": [
			"\t\tclass $1 : public std::exception {",
			"\t\t\tpublic:",
			"\t\t\t\tchar const*\twhat( void ) const throw();",
			"\t\t};",
			""
		],
		"description": "My code snippet for exception class definition"
	},
	"Exception Implementation": {
		"prefix": "Exceptions",
		"body": [
			"char const*\t${TM_FILENAME_BASE}::$1::what( void ) const throw() {",
			"\treturn ( \"${TM_FILENAME_BASE}: Exception: $2\" );",
			"}"
		],
		"description": "My code snippet for exception Implementation"
	},
	"Try Catch Block": {
		"prefix": "try {",
		"body": [
			"try { $1 }",
			"catch ( std::exception& e ) { std::cout << e.what() << std::endl; }",
			""
		],
		"description": "My code snippet for try and catch blocks"
	}
}

{
	"Template main.cpp": {
		"prefix": "main",
		"body": [
			"#include <iostream>",
			"",
			"int	main( int argc, char *argv[] ) {",
			"",
			"	( void )argc;",
			"	( void )argv;",
			"",
			"	$0",
			"",
			"	return ( 0 );",
			"}"
		],
		"description": "main.cpp template snippet"
	},
	"Canonical Header Template": {
		"prefix": "header_canonical",
		"body": [
			"#ifndef $1",
			"# define $1",
			"",
			"/* ************************************************************************** */",
			"/* Headers                                                                    */",
			"/* ************************************************************************** */",
			"",
			"# include <iostream>",
			"# include \"Debug.hpp\"",
			"",
			"/* ************************************************************************** */",
			"/* Class                                                                      */",
			"/* ************************************************************************** */",
			"",
			"class ${2:}{",
			"",
			"	public:",
			"",
			"		/* Constructors and Destructors */",
			"		${2:TM_FILENAME_BASE}( void );",
			"		~${2:TM_FILENAME_BASE}( void );",
			"		${2:TM_FILENAME_BASE}( ${2:TM_FILENAME_BASE} const& src );",
			"",
			"		/* Operator Overload */",
			"		${2:TM_FILENAME_BASE}&	operator=( ${2:TM_FILENAME_BASE} const& rhs );",
			"",
			"		/* Getters and Setters */",
			"",
			"		/* Other Functions */",
			"",
			"	private:",
			"",
			"		/* Private Attributes */",
			"		$0",
			"",
			"};",
			"",
			"/* ************************************************************************** */",
			"/* Other Functions                                                            */",
			"/* ************************************************************************** */",
			"",
			"std::ostream&	operator<<( std::ostream& os, ${2:TM_FILENAME_BASE} const& rhs );",
			"",
			"#endif /* $1 */"
		],
		"description": "Canonical Class header snippet"
	},
	"Class Template": {
		"prefix": "class_implementation",
		"body": [
			"#include \"${TM_FILENAME_BASE}\"",
			"",
			"/* ************************************************************************** */",
			"/* Constructors and Destructors                                               */",
			"/* ************************************************************************** */",
			"",
			"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}( void ) {",
			"	DEBUG( \"<${TM_FILENAME_BASE}> default constructor called\" );",
			"}",
			"",
			"${TM_FILENAME_BASE}::~${TM_FILENAME_BASE}( void ) { DEBUG( \"<${TM_FILENAME_BASE}> destructor called\" ); }",
			"",
			"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}( ${TM_FILENAME_BASE} const& src ) {",
			"	DEBUG( \"<${TM_FILENAME_BASE}> copy constructor called\" );",
			"}",
			"",
			"/* ************************************************************************** */",
			"/* Operator Overload                                                          */",
			"/* ************************************************************************** */",
			"",
			"${TM_FILENAME_BASE}&	${TM_FILENAME_BASE}::operator=( ${TM_FILENAME_BASE} const& rhs ) {",
			"	$0",
			"	return ( *this );",
			"}",
			"",
			"std::ostream&	operator<<( std::ostream& os, ${TM_FILENAME_BASE} const& rhs ) {",
			"	return ( os );",
			"}",
			"",
			"/* ************************************************************************** */",
			"/* Getters and Setters                                                        */",
			"/* ************************************************************************** */",
			"",
			"/* ************************************************************************** */",
			"/* Other Functions                                                            */",
			"/* ************************************************************************** */",
			""
		],
		"description": "Canonical Class header snippet"
	}
}
